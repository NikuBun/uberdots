#!/usr/bin/env perl
use strict;
use Term::UI;
use Term::ReadLine;
use Term::ANSIColor qw(:constants);
use Cwd;
use File::Path qw(remove_tree);
use File::Basename;

$Term::ANSIColor::AUTORESET = 1;

our $term = Term::ReadLine->new('brand');
our $scriptroot = Cwd::abs_path(dirname(__FILE__) . "/..");
our $homedir = glob("~");

if (defined $ENV{'DEBUG_ROOT'}) {
	$homedir = $ENV{'DEBUG_ROOT'};
} 

unshift @INC, $scriptroot;

print BOLD, "Ubercow's Dotfiles Linker.\n";
print BOLD "Root: ", RESET "$scriptroot\n";
print BOLD "Homedir: ", RESET "$homedir\n";
print "\n";

# Many things depend on submodules being up to date.
# Unless you really know what you're doing, let the submodules update.
header("Git", "Updating Submodules.");
update_submodules();
print "\n\n";

if (is_arch()) {
	require archlinux::install;
}
require global::install;
require zsh::install;

### Wonderful Little Helpers
# sym(src, dst)
# This function takes a source and destionation. It prints out an error if there is
# a file in the way and won't relink if the link is already in place.
# Source is relative to the root of .uberdots
sub sym {
	my($src, $dst) = @_;
	$src = $scriptroot . "/" . $src;
	$dst = $homedir . "/" . $dst;
	sym_any($src, $dst)
}

sub header {
	my($name, $desc) = @_;
	print YELLOW, "[$name]: ", RESET UNDERLINE, $desc, "\n";
}

sub sym_any {
	my($src, $dst) = @_;
	if (-e $dst) {
		if (-l $dst && (readlink($dst) eq $src)) {
			print BLUE, "[ALREADY LINKED] ", RESET BOLD $dst, RESET, " => ", BOLD $src, "\n";
			return;
		} else {
			print RED, "[DESTINATION EXISTS] ", RESET, "Please remove ", BOLD $dst, RESET, " and rerun the script.\n";
			return;
		}
	}
	if (symlink($src, $dst)) {
		print GREEN, "[LINK SUCCESS] ", RESET BOLD $dst, RESET, " => ", BOLD $src, "\n";
	} else {
		print RED, "[LINK FAILURE] ", RESET BOLD $dst, RESET, " => ", BOLD $src, "\n";
	}
}

sub is_arch {
	return ($^O eq "linux" && -e "/etc/arch-release") ? 1 : 0;
}

sub is_osx {
	return ($^O eq "darwin") ? 1 : 0;
}

sub update_submodules {
	my $originaldir = getcwd();
	chdir($scriptroot);
	system("git submodule update --init --recursive");
	chdir($originaldir);
}
### End Wonderful Little Helpers
